import os
import sys
import rtconfig

if os.getenv('RTT_ROOT'):
    RTT_ROOT = os.getenv('RTT_ROOT')
else:
    RTT_ROOT = os.path.normpath(os.getcwd() + '/../../../kernel/rtthread')

sys.path = sys.path + [os.path.join(RTT_ROOT, 'tools'), os.getcwd()]
try:
    from building import *
except:
    print('Cannot found RT-Thread root directory, please check RTT_ROOT')
    print(RTT_ROOT)
    exit(-1)

TARGET = 'rt-thread.' + rtconfig.TARGET_EXT

DefaultEnvironment(tools=[])
env = Environment(tools = ['mingw'],
    AS = rtconfig.AS, ASFLAGS = rtconfig.AFLAGS,
    CC = rtconfig.CC, CFLAGS = rtconfig.CFLAGS,
    AR = rtconfig.AR, ARFLAGS = '-rc',
    CXX = rtconfig.CXX, CXXFLAGS = rtconfig.CXXFLAGS,
    LINK = rtconfig.LINK, LINKFLAGS = rtconfig.LFLAGS)
env.PrependENVPath('PATH', rtconfig.EXEC_PATH)

# 路径变量定义
BSP_DIR = os.path.abspath('./')
PROJECT_ROOT = os.path.normpath(os.path.join(BSP_DIR, '../../..'))
RTT_DIR = os.path.join(PROJECT_ROOT, 'kernel/rtthread')
driverframework_path = os.path.join(PROJECT_ROOT, 'driverframework')
libraries_path_prefix = os.path.join(PROJECT_ROOT, 'kernel', 'rtthread', 'bsp', 'stm32', 'libraries')

# 导出变量
Export('BSP_DIR')
Export('RTT_ROOT')
Export('RTT_DIR')
Export('driverframework_path')
Export('PROJECT_ROOT')
Export('env')
Export('rtconfig')

# 准备构建环境
objs = PrepareBuilding(env, RTT_ROOT, has_libcpu=False)

# 设置库类型
rtconfig.BSP_LIBRARY_TYPE = None

# 包含 HAL 驱动
objs.extend(SConscript(os.path.join(libraries_path_prefix, 'HAL_Drivers', 'SConscript'),
                      variant_dir='build/libraries/HAL_Drivers', duplicate=0))

# 执行构建
DoBuilding(TARGET, objs)
