import os
import sys
import rtconfig

# =============================================================================
# RT-Thread 内核路径设置
# =============================================================================
if os.getenv('RTT_ROOT'):
    RTT_ROOT = os.getenv('RTT_ROOT')
else:
    RTT_ROOT = os.path.normpath(os.getcwd() + '/../../../kernel/rtthread')

# 添加 RT-Thread 工具路径和当前目录到Python路径
sys.path = sys.path + [os.path.join(RTT_ROOT, 'tools'), os.getcwd()]
try:
    from building import *
except:
    print('Cannot found RT-Thread root directory, please check RTT_ROOT')
    print(RTT_ROOT)
    exit(-1)

# 构建目标设置
TARGET = 'rt-thread.' + rtconfig.TARGET_EXT

# 编译环境配置
DefaultEnvironment(tools=[])
env = Environment(tools = ['mingw'],
    AS = rtconfig.AS, ASFLAGS = rtconfig.AFLAGS,
    CC = rtconfig.CC, CFLAGS = rtconfig.CFLAGS,
    AR = rtconfig.AR, ARFLAGS = '-rc',
    CXX = rtconfig.CXX, CXXFLAGS = rtconfig.CXXFLAGS,
    LINK = rtconfig.LINK, LINKFLAGS = rtconfig.LFLAGS)
env.PrependENVPath('PATH', rtconfig.EXEC_PATH)

# ICCARM 平台特殊配置
if rtconfig.PLATFORM in ['iccarm']:
    env.Replace(CCCOM = ['$CC $CFLAGS $CPPFLAGS $_CPPDEFFLAGS $_CPPINCFLAGS -o $TARGET $SOURCES'])
    env.Replace(ARFLAGS = [''])
    env.Replace(LINKCOM = env["LINKCOM"] + ' --map rt-thread.map')

# 路径变量定义和计算
BSP_DIR = os.path.abspath('./')                                     # 当前 BSP 目录
PROJECT_ROOT = os.path.normpath(os.path.join(BSP_DIR, '../../../')) # 项目根目录（相对于当前 BSP 目录）
RTT_DIR = os.path.join(PROJECT_ROOT, 'kernel/rtthread')             # RT-Thread 内核路径
driverframework_path = os.path.join(PROJECT_ROOT, 'driverframework')  # 驱动框架路径
# 计算 at32 平台的 libraries 路径（相对项目根目录，不使用绝对路径）
libraries_path_prefix = os.path.join(PROJECT_ROOT, 'kernel', 'rtthread', 'bsp', 'at32', 'libraries')

# 导出必要的变量到构建环境
Export('BSP_DIR')
Export('RTT_ROOT')
Export('RTT_DIR')
Export('driverframework_path')
Export('PROJECT_ROOT')
Export('env')
Export('rtconfig')

# 构建过程
# 准备构建环境
objs = PrepareBuilding(env, RTT_ROOT, has_libcpu=False)

# 设置库类型
rtconfig.BSP_LIBRARY_TYPE = None

# 引入 at32 平台的库组件
objs.extend(SConscript(os.path.join(libraries_path_prefix, 'CMSIS', 'SConscript'),
                      variant_dir='build/libraries/CMSIS', duplicate=0))
objs.extend(SConscript(os.path.join(libraries_path_prefix, 'usbotg_library', 'SConscript'),
                      variant_dir='build/libraries/usbotg_library', duplicate=0))
objs.extend(SConscript(os.path.join(libraries_path_prefix, 'rt_drivers', 'SConscript'),
                      variant_dir='build/libraries/rt_drivers', duplicate=0))

# 执行构建
DoBuilding(TARGET, objs)
